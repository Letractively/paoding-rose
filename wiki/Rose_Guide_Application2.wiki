#summary One-sentence summary of this page.
<wiki:toc max_depth="3" />
= 目的 =

这个示例内容会比较丰富，通过这个示例的了解，我相信您已经能够较为熟练地使用rose开发。

在实践前，我假设您已经把工程的基本建立了，具体过程可参考 [Rose_Guide_Getting_Started 第一支程序]

= 业务介绍 =

这是一个图书库系统，但仅为演示之用，很显然的，它不是真的是一个符合现实的系统。

== 地址规定 ==

http://localhost/lib 是它的访问地址，其中/lib是contextpath，因此简单地，你需要把完成后的webapp内容放在tomcat的webapps/lib目录下，形成webapps/lib/web.xml、webapps/lib/WEB-INF等文件或目录以及其他各种形式的目录和文件。

== 登录规定 ==

进入图书库系统必须进行登录，但一旦登录之后不同用户之间的权限没有太大区别，但是所有的操作都有记录。这些操作记录是只读记录，且只有一个名为rose的用户才能看到。

用户的帐号由rose用户进行创建和注销。

用户登录到系统，要列出所有的书本清单，每页30本。

== 功能 ==

任何用户可增加书、更改书的信息，但只有rose用户才能删书。

任何用户都可以为书编写备注、备注的个数不限制个数。任何人不能删除备注，包括自己的备注，但rose管理员可以删除。

= URI设计=

|| *URI* & *method* ||     Desc   ||
|| */lib*  ||     
|| ....1) GET || 跳转到/lib/book；||
|| */lib/book*  ||     
|| ....2) GET || 按页浏览书库的书，参数page表示页数；||
|| ....3) POST||增加一本书，参数为name、author、price，都是必填项目；||
|| */lib/book/{bookId* }  ||  ||
|| ....4) GET ||  展示该书的详细信息，包括附属的所有评论，最新的备注在前；<br> *如果带有edit参数*，则返回编辑页面，页面不包含评论||
|| ....5) PUT ||修改该书的信息 ||
|| */lib/book/{bookId}/remark*   ||  ||
|| ....6) DELETE|| 删除该书的所有备注||
|| */lib/book/{bookId}/remark/{remarkId}* ||   ||
|| ....7) DELETE || 删除某一个备注||
|| */lib/login* ||   ||
|| ....8) GET  ||  返回登录页面 ||
|| ....9) POST|| 执行登录判断 ||
|| */lib/user* ||   ||
|| ...10) GET|| 列出所有用户||
|| ...11) POST|| 新增一个注册用户||
|| */lib/user/{userId}* ||    ||
|| ...12) DELETE || 注销某个用户||

= 控制器结构 =

* HomeController.java
{{{
package com.company.lib.controllers;

@Path("")
public class HomeController {
    // 1)
    @Get
    public String redirect() {
         return "r:/lib/book";
    }
}

}}}

* ListController.java
{{{
package com.company.lib.controllers.book;

@Path("")
public class ListController {

    // 2)
    @Get
    public String listByPage(@Param("page") @DefValue("1") int page) {
        // TODO: query from database
        return "book-list";
    }

    // 3)
    @Post
    public String add(Book book) {
        // TODO: insert into database
        return "r:/lib/book";
    }

}
}}}


* BookController.java
{{{
package com.company.lib.controllers.book;

// TODOL bookId?id?
@Path("{bookId:[a-zA-Z0-9]+}")
public class BookController {

    // 4)
    @Get
    public String show(@Param("bookId") String bookId, @Param("edit") boolean isEdit) {
        // TODO: query from database
        if (isEdit) {
            return "book-edit";
        }
        // TODO: query remarks from database
        return "book-show";
    }

    // 5)
    @Put
    public String update(Book book) {
        // TODO: update book
        return "r:/lib/book/" + book.getId() + "?edit=true";
    }

}
}}}