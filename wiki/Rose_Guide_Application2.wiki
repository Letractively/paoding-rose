#summary One-sentence summary of this page.
<wiki:toc max_depth="3" />
= 目的 =

这个示例内容会比较丰富，通过这个示例的了解，我相信您已经能够较为熟练地使用rose开发。

在实践前，我假设您已经把工程的基本建立了，具体过程可参考 [Rose_Guide_Getting_Started 第一支程序]

= 业务介绍 =

这是一个图书库系统，但仅为演示之用，很显然的，它不是真的是一个符合现实的系统。

== 地址规定 ==

http://localhost/lib 是它的访问地址，其中/lib是contextpath，因此简单地，你需要把完成后的webapp内容放在tomcat的webapps/lib目录下，形成webapps/lib/web.xml、webapps/lib/WEB-INF等文件或目录以及其他各种形式的目录和文件。

== 登录规定 ==

进入图书库系统必须进行登录，但一旦登录之后不同用户之间的权限没有太大区别，但是所有的操作都有记录。这些操作记录是只读记录，且只有一个名为rose的用户才能看到。

用户的帐号由rose用户进行创建和注销。

用户登录到系统，要列出所有的书本清单，每页30本。

== 功能 ==

任何用户可增加书、更改书的信息，但只有rose用户才能删书。

任何用户都可以为书编写备注、备注的个数不限制个数。任何人不能删除备注，包括自己的备注，但rose管理员可以删除。

= URI设计=

|| *URI* & *method* ||     Desc   ||
|| */lib*  ||     
|| ....1) GET || 跳转到/lib/book；||
|| */lib/book*  ||     
|| ....2) GET || 按页浏览书库的书，参数offset用于分页；||
|| ....3) POST||增加一本书，参数为name、author、price，都是必填项目；||
|| */lib/book/add  ||  ||
|| ....4) GET ||  显示增加书的页面 ||
|| */lib/book/{bookId}*  ||  ||
|| ....5) GET ||  展示该书的详细信息，包括附属的所有评论，最新的备注在前；<br> *如果带有edit参数*，则返回编辑页面，页面不包含评论||
|| ....6) PUT ||修改该书的信息 ||
|| */lib/book/{bookId}/remark*   ||  ||
|| ....7) DELETE|| 删除该书的所有备注||
|| */lib/book/{bookId}/remark/{remarkId}* ||   ||
|| ....8) DELETE || 删除某一个备注||
|| */lib/login* ||   ||
|| ....9) GET  ||  返回登录页面 ||
|| ...10) POST|| 执行登录判断 ||
|| */lib/user* ||   ||
|| ...11) GET|| 列出所有用户||
|| ...12) POST|| 新增一个注册用户||
|| */lib/user/add* ||   ||
|| ...13) GET|| 显示增加用户的页面||
|| */lib/user/{userId}* ||    ||
|| ...14) GET|| 显示某个用户的详细信息；<br> *如果带有edit参数*，则返回编辑页面||
|| ...15) DELETE || 注销某个用户||
|| */lib/logs* ||    ||
|| ...16) GET|| 按页列出所有用户操作日志||

= 控制器设计 =


== {{{ HomeController.java }}}==
{{{
package com.company.lib.controllers;

@LoginRequired
@Path("")
public class HomeController {
    // 1)
    @Get
    public String redirect() {
         return "r:/lib/book";
    }
}

}}}


== {{{ book.BookController.java }}}==
{{{
package com.company.lib.controllers.book;

@LoginRequired
@Path("")
public class BookController {

    // 2)
    @Get
    public String list(@Param("offset") int offset) {
        // 控制器方法返回以"@"开头，是为暂时策略;
        // 这样使得在没有页面的情况下不会404错误，当页面准备好的时候要去掉"@"
        // 下同
        return "@book-list";
    }

    // 3)
    @Post
    public String add(Book book) {
        // TODO: insert into database
        if (success) {
            return "r:/lib/book";
        } else {
            return "@book-add";
        }
    }

    // 4)
    @Get("add")
    public String showAdd() {
        return "@book-add";
    }

    // 5)
    @Get("{bookId}")
    public String show(@Param("bookId") String bookId, @Param("edit") boolean isEdit) {
        // TODO: query from database
        if (isEdit) {
            return "@book-edit";
        }
        // TODO: query remarks from database
        return "@book-page";
    }

    // 6)
    @Put("{bookId}")
    public String update(Book book) {
        // TODO: update book
        return "r:/lib/book/" + book.getId() + "?edit=true";
    }

}
}}}

== {{{book.RemarkController.java }}}==
{{{
package com.company.lib.controllers.book;

@LoginRequired
@Path("{bookId}/remark}")
public class RemarkController {

    // 7)
    @Delete
    public String clear(@Param("bookId") String bookId) {
        return "r:/lib/book/" + bookId;
    }

    // 8)
    @Delete("{remarkId}")
    public String delete(@Param("bookId") String bookId, @Param("remarkId") String remarkId) {
        return "r:/lib/book/" + bookId;
    }
}

}}}

== {{{LoginController.java }}}==
{{{
package com.company.lib.controllers;

@Path("login")
public class LoginController {

    // 9)
    @Get
    public String show() {
        return "@login";
    }

    // 10)
    @Post
    public String doLogin() {
        return "r:/lib/book";
    }
}
}}}

== {{{user.UserController.java}}} ==
{{{
package com.company.lib.controllers.user;

@LoginRequired
@Path("")
public class UserController {

    // 11)
    @Get
    public String list() {
        return "@user-list";
    }

    // 12)
    @Post
    public String add(User user) {
        if (success) {
            return "r:/lib/user";
        } else {
            return "@user-add";
        }
    }

    // 13)
    @Get("add")
    public String showAdd() {
        return "@user-add";
    }

    // 14)
    @Get("{userId}")
    public String show(@Param("userId") String userId, @Param("isEdit") boolean isEdit) {
        if (isEdit) {
            return "@user-edit";
        }
        return "@user-page";
    }

    // 15)
    @Delete("{userId}")
    public String delete(@Param("userId") String userId) {
        return "r:/lib/user";
    }
}
}}}

== {{{ logs.LogsController.java }}}==

{{{
package com.company.lib.controllers.logs;

@LoginRequired
@Path("")
public class LogsCotnroller {

    // 16)
    @Get
    public String list(@Param("offset") int offset) {
        return "@logs-list";
    }
}
}}}

= 拦截器设计 =


== {{{ PassportInterceptor.java }}}==

{{{
package com.company.lib.controllers;

@Interceptor(oncePerRequest = true)
public PassportInterceptor extends ControllerInterceptorAdapter {


    public PassportInterceptor() {
        setPriority(1000);
    }
    
    protected Object before(Invocation inv) throws Exception  {
        User loginUser = ...;
        inv.getRequest().setAttribute("loginUser", loginUser);
        return true;
    }
}
}}}

== {{{ LoginRequredInterceptor.java }}}==

{{{
package com.company.lib.controllers;

public LoginRequredInterceptor extends ControllerInterceptorAdapter {

    public LoginRequredInterceptor() {
        setPriority(900);
    }

    protected Class<? extends Annotation> getRequiredAnnotationClass() {
        return LoginRequired.class;
    }
    
    protected Object before(Invocation inv) throws Exception {
        User loginUser = inv.getRequest().getAttribute("loginUser");
        if (loginUser == null) {
             return "r:/lib/login";
        }
        return true;
    }
}
}}}

== {{{ LoginRequired.java }}}==

{{{

package com.company.lib.controllers;

@Inherited
@Target( { ElementType.TYPE, ElementType.METHOD })
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface LoginRequired {

}

}}}

== {{{ AutoLogInterceptor.java }}}==

{{{
package com.company.lib.controllers;

public AutoLogInterceptor extends ControllerInterceptorAdapter {
    
    public void afterCompletion(Invocation inv, Throwable ex) throws Exception  {
        String uid = inv.getResourceId(); // e.g. /lib/book/{bookId}
        String uri = inv.getRequestPath().getUri(); // e.g. /lib/book/123456
        boolean fail = (ex != null);
        String failMessage = fail ? ex.getMessage() : null;
        // TODO: put into a executor that save it to database 
    }
}
}}}

= 数据库表设计 =

== user表 ==
|| *列名*     || *类型*       || *说明*     ||
|| id         || bigint       || 主健、自增 ||
|| login_name || varchar(255) || 登录名、非空、唯一||
|| passord    || varchar(255) || 密码       ||
|| name       || varchar(255) ||  姓名      ||
|| create_time|| timestamp    || 创建时间   ||

== book表 ==

|| *列名*     || *类型*       || *说明*     ||
|| id         || bigint       || 主健、自增、降序返回 ||
|| name       || varchar(255) || 书名       ||
|| price      || float        || 价格       ||
|| author     || varchar(255) || 作者       ||
|| create_time|| timestamp    || 创建时间   ||

== remark表 ==

|| *列名*     || *类型*       || *说明*     ||
|| id         || bigint       || 主健、自增 ||
|| user_name  || varchar(255) || 备注人姓名 ||
|| book_id    || varchar(255) || 书名       ||
|| essay      || varchar(2000)|| 备注内容   ||
|| create_time|| timestamp    || 创建时间   ||

== oper_log表 ==

|| *列名*     || *类型*       || *说明*     ||
|| id         || bigint       || 主健、自增 ||
|| user_name  || varchar(255) || 操作者人姓名 ||
|| resource_pattern || varchar(255) || 资源地址模式 ||
|| resource_id      || varchar(255) || 资源地址     ||
|| success          || tinyint(1)   || 操作成功?    ||
|| remarks          || varchar(255) || 对操作的额外说明 ||
|| create_time      || timestamp    || 创建时间         ||

= DAO设计=

== BookDAO.java ==

{{{
package com.company.lib.dao;

@DAO
public interface BookDAO {

    @SQL("select id, name, price, author from book where id = :1")
    public Book get(long bookId);

    @SQL("select id, name, price, author from book limit :1 order by id desc ")
    public Book find(int limit);

    @SQL("select id, name, price, author from book where id < :1 limit :2 order by id desc ")
    public Book find(long bookId, int limit);

    @SQL("update book set name=:1.name, price=:1.price, author=:1.author where id=:1.id")
    public void update(Book book);

    @SQL("insert into book (name, price, author) values (:1.name, :1.price, :1.author)")
    public Identity save(Book book)

}

}}}

== RemarkDAO.java ==

{{{
package com.company.lib.dao;
id	 bigint	 主健、自增
user_name	 varchar(255)	 备注人姓名
book_id	 varchar(255)	 书名
essay	 varchar(2000)	 备注内容
create_time	 timestamp	
@DAO
public interface RemarkDAO {

    @SQL("select id, user_name, book_id, essay, create_time from remark where book_id=:1")
    public List<Remark> findByBook(long bookId);

    @SQL("delete from remark where book_id=:1")
    public void deleteByBook(long bookId);

    @SQL("delete from remark where id=:1")
    public void delete(long remarkId);

    @SQL("insert into remark (user_name, book_id, essay) values (:1.userName, :1.bookId, :1.essay")
    public Identity save(Remark remark);

    

}

}}}


== UserDAO.java ==

{{{
package com.company.lib.dao;

@DAO
public interface UserDAO {

    @SQL("select id, name, login_name from user where login_name=:1") 
    public User getByLoginName(String loginName);

    @SQL("select id, name, password, login_name, create_time from user where id=:1") 
    public User get(long userId);

    @SQL("select id, name, login_name, create_time from user")
    public List<User> find();

    @SQL("delete from user where id=:1")
    public void delete(long userId);

}
}}}

== OperLogDAO.java ==

{{{
package com.company.lib.dao;

@DAO
public interface OperLogDAO {

    @SQL("select id, user_name, resource_pattern, resource_id, success, remarks, create_time from oper_log")
    public List<OperLog> find();

    @SQL("insert into oper_log (user_name, resource_pattern, resource_id, success, remarks) values (:1.userName, :1.resourcePatterh, :1.resourceId, :1.success, :1.remarks)")
    public void save(OperLog operLog);

}

}}}